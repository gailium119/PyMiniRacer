name: pypi-build

on:
  # For PRs:
  pull_request: {}
  # For releases:
  workflow_dispatch: {}
  push:
    branches:
      - '*'

concurrency:
  group: build-${{ github.head_ref }}

defaults:
  run:
    shell: bash

jobs:
  sdist:
    name: Build sdist
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        # Fetch all tags
        fetch-depth: 0

    - name: Install deps
      run: python -m pip install --upgrade build

    - name: Build
      run: python -m build --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*
        if-no-files-found: error

  # We build for Mac and Windows directly on the supported GitHub-hosted runners.
  non-linux-wheels:
    name: Build wheel for ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Note that to maximize compatibility of generated wheels, we build on the
          # *oldest* supported GitHub-hosted runners, per
          # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners
          - os: windows-2022  # x86_64
          - os: windows-11-arm   # arm64

    steps:
    - name: Configure git
      run: git config --global core.symlinks true

    - uses: actions/checkout@v3
      with:
        # Fetch all tags
        fetch-depth: 0

    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.3
      # For security reasons, only use sccache on releases:
      if: ${{ startsWith(github.ref, 'refs/heads/release') }}

    - uses: actions/setup-python@v5
      with:
        # depot_tools still uses distutils which is gone in 3.12:
        python-version: '3.11'
    - name: Install Build Tools
      shell: powershell
      run: 
        $deps = @(
         @{ Name = 'Visual Studio 2022 Build Tools (aarch64)';
            Url = 'https://aka.ms/vs/17/release/vs_buildtools.exe';
            Args = @('--add', 'Microsoft.VisualStudio.Component.VC.Tools.ARM64',
                  '--add', 'Microsoft.VisualStudio.Component.Windows11SDK.22621',
                  '--quiet', '--wait', '--norestart', '--nocache') }
        )
    
    
        function Log { param([string]$Message, [string]$Level = "INFO")
          $timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
          if ($Level -eq "ERROR") {
            Write-Host "$timestamp [ERROR] - $Message" -ForegroundColor Red
          } else {
            Write-Host "$timestamp [$Level] - $Message"
          }
        }
    
        $deps | ForEach-Object {
          $install_file = $_.Url
          if ($_.Url -match "^https?://") {
            Log "Downloading $($_.Name) from '$($_.Url)'..."
            $install_file = Join-Path "${{ github.workspace }}" (Split-Path $_.Url -Leaf)
            Invoke-WebRequest -Uri $_.Url -OutFile $install_file -UseBasicParsing
          }

          Log "Installing $($_.Name)..."
          Start-Process -FilePath $install_file -ArgumentList $_.Args -NoNewWindow -Wait
          Log "$($_.Name) installation completed."
        }
    - name: Build wheel
      run: |
        set -e
        python3 -m pip install --upgrade build PySocks
        python3 -m build --wheel

    - uses: actions/upload-artifact@v4
      with:
        name: wheels
        path: dist/*
        if-no-files-found: error

    - name: Test wheel
      run: |
        set -e
        python3 -m pip install --upgrade hatch hatch-fancy-pypi-readme hatch-mkdocs
        hatch run testinstalled:install dist/*.whl
        hatch run testinstalled:run

  release:
    name: Create GitHub release
    if: startsWith(github.ref, 'refs/heads/release')
    needs:
    - non-linux-wheels
    - sdist
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v3

    - name: Compute release version
      run: |
        VERSION=${GITHUB_REF_NAME#release/}
        echo Version: $VERSION
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Make release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "wheels/*,sdist/*"
        commit: ${{ github.ref }}
        tag: ${{ env.VERSION }}

  publish:
    name: Upload release to PyPI
    if: startsWith(github.ref, 'refs/heads/release')
    needs:
    - release
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/mini-racer
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
    - uses: actions/download-artifact@v3

    - name: Make dist directory
      run: mkdir dist && cp wheels/* sdist/* dist/

    - name: Publish package distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
